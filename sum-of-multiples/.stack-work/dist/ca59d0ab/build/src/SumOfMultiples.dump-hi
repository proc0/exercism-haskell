
==================== FINAL INTERFACE ====================
2017-12-05 08:21:52.6283293 UTC

interface sum-of-multiples-1.1.0.4-6mb9iEd70joDx940EJupsG:SumOfMultiples 8002
  interface hash: 25c9eee1eeae4fdfee6ed35b173873ad
  ABI hash: 74919f138cd37d15112babb27c2bf49c
  export-list hash: f921b1f218ac3bb4e00d517d00794e5e
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 1592c852681ff371afa65b2677f320e0
  sig of: Nothing
  used TH splices: False
  where
exports:
  SumOfMultiples.sumOfMultiples
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Data.Foldable 254e836c2d813d34e47feb29bb8d40ed
import  -/  base-4.9.1.0:GHC.Base 4caea1123ecf4b46e27cbccd6d279377
import  -/  base-4.9.1.0:GHC.List d11eb227c1c6fbfd89bb781d72eaea0d
import  -/  base-4.9.1.0:GHC.Num 38b8aac8807c096c7f3ca3c1eff02939
import  -/  base-4.9.1.0:GHC.Real b88ae4a48c079652623073a5bbf5c9b0
import  -/  base-4.9.1.0:Prelude 74b3e204395920329f6de9d97206abe9
import  -/  ghc-prim-0.5.0.0:GHC.Classes 16d48e012d23eaef9bca91ccdd572c02
import  -/  integer-gmp-1.0.0.1:GHC.Integer.Type 5e60b761569ee353529e98a36b72df11
b4328ef5ecd818935515a5baa819fa12
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   SumOfMultiples.$trModule2
                   SumOfMultiples.$trModule1) -}
1a243a9068f9df604cfae2b02d72a964
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "SumOfMultiples"#) -}
c53867e3d657d2b5c098cf2a5db3da41
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "sum-of-multiples-1.1.0.4-6mb9iEd70joDx940EJupsG"#) -}
db0c25fc57879b52c2a630801c7ef98f
  sumOfMultiples ::
    [GHC.Integer.Type.Integer]
    -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
  {- Arity: 2, Strictness: <S,U><L,U>,
     Unfolding: (\ (factors :: [GHC.Integer.Type.Integer])
                   (limit :: GHC.Integer.Type.Integer) ->
                 case GHC.List.$wlenAcc
                        @ GHC.Integer.Type.Integer
                        factors
                        0# of ww2 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww2 0#) of wild {
                   GHC.Types.False
                   -> case GHC.Integer.Type.leInteger#
                             limit
                             SumOfMultiples.sumOfMultiples2 of wild1 { DEFAULT ->
                      case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild1 of wild2 {
                        GHC.Types.False
                        -> let {
                             lim :: GHC.Integer.Type.Integer
                             = GHC.Integer.Type.minusInteger
                                 limit
                                 SumOfMultiples.sumOfMultiples1
                           } in
                           letrec {
                             go :: GHC.Integer.Type.Integer
                                   -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
                               {- Arity: 2, Strictness: <S,U><S,1*U> -}
                             = \ (x :: GHC.Integer.Type.Integer)
                                 (eta :: GHC.Integer.Type.Integer) ->
                               case GHC.Integer.Type.gtInteger# x lim of wild3 { DEFAULT ->
                               case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild3 of wild4 {
                                 GHC.Types.False
                                 -> case GHC.List.filter
                                           @ GHC.Integer.Type.Integer
                                           (\ (x1 :: GHC.Integer.Type.Integer) ->
                                            case GHC.Integer.Type.eqInteger#
                                                   x1
                                                   SumOfMultiples.sumOfMultiples2 of wild5 { DEFAULT ->
                                            case GHC.Prim.tagToEnum#
                                                   @ GHC.Types.Bool
                                                   wild5 of wild6 {
                                              GHC.Types.False
                                              -> case GHC.Integer.Type.eqInteger#
                                                        (GHC.Integer.Type.modInteger x x1)
                                                        SumOfMultiples.sumOfMultiples2 of wild7 { DEFAULT ->
                                                 GHC.Prim.tagToEnum# @ GHC.Types.Bool wild7 }
                                              GHC.Types.True
                                              -> case GHC.Real.divZeroError
                                                 ret_ty GHC.Types.Bool
                                                 of {} } })
                                           factors of wild5 {
                                      []
                                      -> go
                                           (GHC.Integer.Type.plusInteger x GHC.Enum.$fEnumInteger1)
                                           eta
                                      : ds1 ds2
                                      -> go
                                           (GHC.Integer.Type.plusInteger x GHC.Enum.$fEnumInteger1)
                                           (GHC.Integer.Type.plusInteger eta x) }
                                 GHC.Types.True -> eta } }
                           } in
                           go SumOfMultiples.sumOfMultiples1 SumOfMultiples.sumOfMultiples2
                        GHC.Types.True -> SumOfMultiples.sumOfMultiples2 } }
                   GHC.Types.True -> SumOfMultiples.sumOfMultiples2 } }) -}
90fb9ffce707854c7404b1259069dd8f
  sumOfMultiples1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
1a9272203bfd68dd858795ef62ad2944
  sumOfMultiples2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False


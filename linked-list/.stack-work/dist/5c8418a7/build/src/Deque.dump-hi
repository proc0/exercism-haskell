
==================== FINAL INTERFACE ====================
2018-04-24 06:17:45.3465759 UTC

interface linked-list-0.1.0.2-2MvITBm9awp2EnGmM0nlGE:Deque 8022
  interface hash: a598fe15a43ba6eb915c035bad749302
  ABI hash: 055fe15d1590062e00c63188c5493ef5
  export-list hash: 07dced9b0b56b8774723ad27e2154b26
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 83000bbcacf32e06fde4ebb1e02bf481
  sig of: Nothing
  used TH splices: False
  where
exports:
  Deque.mkDeque
  Deque.pop
  Deque.push
  Deque.shift
  Deque.unshift
  Deque.Deque
module dependencies:
package dependencies: base-4.10.1.0* ghc-prim-0.5.1.1
                      integer-gmp-1.0.1.0
orphans: base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Either base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Type.Equality base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats
import  -/  base-4.10.1.0:Data.IORef e5d73d44bb8ca5c86eb5eca721eb9d54
import  -/  base-4.10.1.0:Data.Tuple ab0c62ebfcacf00dcba54934885c5064
import  -/  base-4.10.1.0:GHC.Base 8f949d675e49677c272f02ab7a85fe18
import  -/  base-4.10.1.0:GHC.IORef 6a96a0209ad984a8ff499e45faa4a18f
import  -/  base-4.10.1.0:GHC.List 1bb0adf79553530dc898796596e53188
import  -/  base-4.10.1.0:Prelude a93a9400cc0c816c2ee5f39399baa7a0
import  -/  ghc-prim-0.5.1.1:GHC.Types b1fd0716441595db508c1a74387bf394
e7f2f317a3d513d310c1117340ee60b9
  $tc'Empty :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18064999873938885368##
                   10243899491623419216##
                   Deque.$trModule
                   Deque.$tc'Empty2
                   1#
                   Deque.$tc'Empty1) -}
767cff2d0be9fd639796a0b967982621
  $tc'Empty1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
e8b2971a3ef70589af4b9e878697955d
  $tc'Empty2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Deque.$tc'Empty3) -}
284ec51a605733ebfd6fcea9109d3305
  $tc'Empty3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Empty"#) -}
c22aa90b1741dcf90ff9b6afc296ca58
  $tc'Many :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4282344050560409778##
                   868918238637006804##
                   Deque.$trModule
                   Deque.$tc'Many2
                   1#
                   Deque.$tc'Many1) -}
9dac8e7f8427968ed0a063b23bbcd8d8
  $tc'Many1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d208e13a6ad79b7af60885498f59e6e6
  $tc'Many2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Deque.$tc'Many3) -}
5dd065391b2acac0b7a85729251ba0e4
  $tc'Many3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Many"#) -}
b16df5321347be6fc00bb36bfa18620f
  $tc'One :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13211996389612898373##
                   11353695736914219883##
                   Deque.$trModule
                   Deque.$tc'One2
                   1#
                   Deque.$tc'One1) -}
8fe6658fe8a0a22fa866600a9b63c8c2
  $tc'One1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
0cedcfc083305c1d907a7e147d2caf02
  $tc'One2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Deque.$tc'One3) -}
d731073927cf049ccb2417bc104a7049
  $tc'One3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'One"#) -}
639ac6154b4ce3cfb20ba6418b5fd255
  $tc'Two :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7671532498252988312##
                   17831790556724877497##
                   Deque.$trModule
                   Deque.$tc'Two2
                   1#
                   Deque.$tc'Two1) -}
324759c512de9437daf4bfae39328d16
  $tc'Two1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
9072d23ad6b7df96ace6b864c53053d3
  $tc'Two2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Deque.$tc'Two3) -}
515a5ccae53da88029429fda35d39770
  $tc'Two3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Two"#) -}
fcd8e6f3ef4ef9cd2ed65b6331c1f56b
  $tcDeque :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7224627505058827020##
                   10604580502042478440##
                   Deque.$trModule
                   Deque.$trModule1
                   0#
                   GHC.Types.krep$*Arr*) -}
656748de81544095d2f825a8342697ab
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Deque.$trModule3 Deque.$trModule1) -}
624e86b8719269bb07cfbd5b1e6d15ea
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Deque.$trModule2) -}
017eb291e1bbb783705d76ee33bd6d2d
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Deque"#) -}
c9a648aedc6bc163467a7d30c08cdd81
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Deque.$trModule4) -}
00925ce270efdfa80328c1509de7c7de
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("linked-list-0.1.0.2-2MvITBm9awp2EnGmM0nlGE"#) -}
cf3f20a0a557f41fb71af9d0f0f84c60
  $wpop ::
    GHC.Prim.MutVar# GHC.Prim.RealWorld (Deque.Deque a)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.Maybe a #)
  {- Arity: 2, Strictness: <S,U><S,U>, Inline: [0],
     Unfolding: (\ @ a
                   (ww :: GHC.Prim.MutVar# GHC.Prim.RealWorld (Deque.Deque a))
                   (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.readMutVar#
                        @ GHC.Prim.RealWorld
                        @ (Deque.Deque a)
                        ww
                        w of ds1 { (#,#) ipv ipv1 ->
                 let {
                   result :: (GHC.Base.Maybe a, Deque.Deque a)
                   = case ipv1 of wild {
                       Deque.Empty -> Deque.pop4 @ a
                       Deque.One a1 -> (GHC.Base.Just @ a a1, Deque.Empty @ a)
                       Deque.Two ds
                       -> case ds of wild1 { (,) a1 b ->
                          (GHC.Base.Just @ a b, Deque.One @ a a1) }
                       Deque.Many ds
                       -> case ds of wild1 { (,) a1 ds2 ->
                          case ds2 of wild2 { (,) ds3 c ->
                          case ds3 of wild3 {
                            [] -> (GHC.Base.Just @ a c, Deque.Many @ a (a1, Deque.pop3 @ a))
                            : b ds4
                            -> case ds4 of wild4 {
                                 [] -> (GHC.Base.Just @ a c, Deque.Two @ a (a1, b))
                                 : ipv2 ipv3
                                 -> (GHC.Base.Just @ a c,
                                     Deque.Many
                                       @ a
                                       (a1,
                                        (GHC.List.init1 @ a b wild4,
                                         Deque.pop2 @ a wild3 (GHC.List.lastError @ a)))) } } } } }
                 } in
                 case GHC.Prim.writeMutVar#
                        @ GHC.Prim.RealWorld
                        @ (Deque.Deque a)
                        ww
                        (Data.Tuple.snd @ (GHC.Base.Maybe a) @ (Deque.Deque a) result)
                        ipv of s2# { DEFAULT ->
                 (# s2#,
                    Data.Tuple.fst
                      @ (GHC.Base.Maybe a)
                      @ (Deque.Deque a)
                      result #) } }) -}
a22f0ed51acca6692f284c5b543d103c
  $wpush ::
    GHC.Prim.MutVar# GHC.Prim.RealWorld (Deque.Deque a)
    -> a
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><L,U><S,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (ww :: GHC.Prim.MutVar# GHC.Prim.RealWorld (Deque.Deque a))
                   (w :: a)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.readMutVar#
                        @ GHC.Prim.RealWorld
                        @ (Deque.Deque a)
                        ww
                        w1 of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Prim.writeMutVar#
                        @ GHC.Prim.RealWorld
                        @ (Deque.Deque a)
                        ww
                        (case ipv1 of wild {
                           Deque.Empty -> Deque.One @ a w
                           Deque.One a1 -> Deque.Two @ a (a1, w)
                           Deque.Two ds
                           -> case ds of wild1 { (,) a1 b ->
                              Deque.Many @ a (a1, (GHC.Types.: @ a b (GHC.Types.[] @ a), w)) }
                           Deque.Many ds
                           -> case ds of wild1 { (,) a1 ds2 ->
                              case ds2 of wild2 { (,) bs c ->
                              Deque.Many
                                @ a
                                (a1,
                                 (GHC.Base.++ @ a bs (GHC.Types.: @ a c (GHC.Types.[] @ a)),
                                  w)) } } })
                        ipv of s2# { DEFAULT ->
                 (# s2#, GHC.Tuple.() #) } }) -}
ded5aab9eb875a5ed5f97d399098c5e7
  $wshift ::
    GHC.Prim.MutVar# GHC.Prim.RealWorld (Deque.Deque a)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.Maybe a #)
  {- Arity: 2, Strictness: <S,U><S,U>, Inline: [0],
     Unfolding: (\ @ a
                   (ww :: GHC.Prim.MutVar# GHC.Prim.RealWorld (Deque.Deque a))
                   (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.readMutVar#
                        @ GHC.Prim.RealWorld
                        @ (Deque.Deque a)
                        ww
                        w of ds1 { (#,#) ipv ipv1 ->
                 let {
                   result :: (GHC.Base.Maybe a, Deque.Deque a)
                   = case ipv1 of wild {
                       Deque.Empty -> Deque.pop4 @ a
                       Deque.One a1 -> (GHC.Base.Just @ a a1, Deque.Empty @ a)
                       Deque.Two ds
                       -> case ds of wild1 { (,) a1 b ->
                          (GHC.Base.Just @ a a1, Deque.One @ a b) }
                       Deque.Many ds
                       -> case ds of wild1 { (,) a1 ds2 ->
                          case ds2 of wild2 { (,) ds3 c ->
                          case ds3 of wild3 {
                            []
                            -> (GHC.Base.Just @ a a1,
                                Deque.Many @ a (GHC.List.badHead @ a, (GHC.List.scanl2 @ a, c)))
                            : b ds4
                            -> case ds4 of wild4 {
                                 [] -> (GHC.Base.Just @ a a1, Deque.Two @ a (b, c))
                                 : ipv2 ipv3
                                 -> (GHC.Base.Just @ a a1, Deque.Many @ a (b, (wild4, c))) } } } } }
                 } in
                 case GHC.Prim.writeMutVar#
                        @ GHC.Prim.RealWorld
                        @ (Deque.Deque a)
                        ww
                        (Data.Tuple.snd @ (GHC.Base.Maybe a) @ (Deque.Deque a) result)
                        ipv of s2# { DEFAULT ->
                 (# s2#,
                    Data.Tuple.fst
                      @ (GHC.Base.Maybe a)
                      @ (Deque.Deque a)
                      result #) } }) -}
67365bdcb2ae327c04952dda81126c0e
  $wunshift ::
    GHC.Prim.MutVar# GHC.Prim.RealWorld (Deque.Deque a)
    -> a
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><L,U><S,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (ww :: GHC.Prim.MutVar# GHC.Prim.RealWorld (Deque.Deque a))
                   (w :: a)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.readMutVar#
                        @ GHC.Prim.RealWorld
                        @ (Deque.Deque a)
                        ww
                        w1 of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Prim.writeMutVar#
                        @ GHC.Prim.RealWorld
                        @ (Deque.Deque a)
                        ww
                        (case ipv1 of wild {
                           Deque.Empty -> Deque.One @ a w
                           Deque.One a1 -> Deque.Two @ a (w, a1)
                           Deque.Two ds
                           -> case ds of wild1 { (,) a1 b ->
                              Deque.Many @ a (w, (GHC.Types.: @ a a1 (GHC.Types.[] @ a), b)) }
                           Deque.Many ds
                           -> case ds of wild1 { (,) a1 ds2 ->
                              case ds2 of wild2 { (,) bs c ->
                              Deque.Many @ a (w, (GHC.Types.: @ a a1 bs, c)) } } })
                        ipv of s2# { DEFAULT ->
                 (# s2#, GHC.Tuple.() #) } }) -}
b710dbc4e2e02c13b8c5304735aa0a87
  data Deque a = Empty | One a | Two (a, a) | Many (a, ([a], a))
4157db98326fd2c290b4ba84cde446c0
  type IODeque a = GHC.IORef.IORef (Deque.Deque a)
d048e40330c11aee610e4bc3959e294c
  mkDeque :: GHC.Types.IO (Deque.IODeque a)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Deque.mkDeque1
                  `cast`
                (forall (a :: <*>_N).
                 Sym (GHC.Types.N:IO[0] <Deque.IODeque a>_R)) -}
b9bdcc155da3c39b33894ea00e685e90
  mkDeque1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.IORef.IORef (Deque.Deque a) #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.newMutVar#
                        @ (Deque.Deque a)
                        @ GHC.Prim.RealWorld
                        (Deque.Empty @ a)
                        s of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    (GHC.STRef.STRef @ GHC.Prim.RealWorld @ (Deque.Deque a) ipv1)
                      `cast`
                    (Sym (GHC.IORef.N:IORef[0]) <Deque.Deque a>_N) #) }) -}
7f44f45a46a4106cd2828d6ef15fdac2
  pop :: Deque.IODeque a -> GHC.Types.IO (GHC.Base.Maybe a)
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Deque.pop1
                  `cast`
                (forall (a :: <*>_N).
                 <Deque.IODeque a>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.Maybe a>_R)) -}
4c8faf95383a8a3111cc5938e40f4a34
  pop1 ::
    Deque.IODeque a
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.Maybe a #)
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (w :: Deque.IODeque a)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w `cast`
                      (GHC.IORef.N:IORef[0] <Deque.Deque
                                               a>_N) of ww { GHC.STRef.STRef ww1 ->
                 Deque.$wpop @ a ww1 w1 }) -}
26e970140db0c345c5a04cc4f986b346
  pop2 :: [a] -> a -> a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
f7477a26d1cc9f9bc9dd4fe66bb0ca1d
  pop3 :: ([a], a)
  {- Strictness: m,
     Unfolding: (\ @ a ->
                 (GHC.List.init2 @ a, GHC.List.lastError @ a)) -}
04c02edd65693444384ac1f9128c18a5
  pop4 :: (GHC.Base.Maybe a, Deque.Deque a)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (\ @ a -> (GHC.Base.Nothing @ a, Deque.Empty @ a)) -}
47e83edd2c7b7a7f78878a76d222ccba
  push :: Deque.IODeque a -> a -> GHC.Types.IO ()
  {- Arity: 3, HasNoCafRefs, Strictness: <S(S),1*U(U)><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Deque.push1
                  `cast`
                (forall (a :: <*>_N).
                 <Deque.IODeque a>_R
                 ->_R <a>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
18e73e96f16939c50d459eea4d063479
  push1 ::
    Deque.IODeque a
    -> a
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S(S),1*U(U)><L,U><S,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: Deque.IODeque a)
                   (w1 :: a)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w `cast`
                      (GHC.IORef.N:IORef[0] <Deque.Deque
                                               a>_N) of ww { GHC.STRef.STRef ww1 ->
                 Deque.$wpush @ a ww1 w1 w2 }) -}
9f7b3cb3e9d03adf3445cafc1ed889b0
  shift :: Deque.IODeque a -> GHC.Types.IO (GHC.Base.Maybe a)
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Deque.shift1
                  `cast`
                (forall (a :: <*>_N).
                 <Deque.IODeque a>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.Maybe a>_R)) -}
730bab2f1dff4f950ebb6612aa410620
  shift1 ::
    Deque.IODeque a
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.Maybe a #)
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (w :: Deque.IODeque a)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w `cast`
                      (GHC.IORef.N:IORef[0] <Deque.Deque
                                               a>_N) of ww { GHC.STRef.STRef ww1 ->
                 Deque.$wshift @ a ww1 w1 }) -}
6eba4b0751d728b7d02f3c6ea0a0df1b
  unshift :: Deque.IODeque a -> a -> GHC.Types.IO ()
  {- Arity: 3, HasNoCafRefs, Strictness: <S(S),1*U(U)><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Deque.unshift1
                  `cast`
                (forall (a :: <*>_N).
                 <Deque.IODeque a>_R
                 ->_R <a>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
bc79354d85e92d99a27cb57484620ef4
  unshift1 ::
    Deque.IODeque a
    -> a
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S(S),1*U(U)><L,U><S,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: Deque.IODeque a)
                   (w1 :: a)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w `cast`
                      (GHC.IORef.N:IORef[0] <Deque.Deque
                                               a>_N) of ww { GHC.STRef.STRef ww1 ->
                 Deque.$wunshift @ a ww1 w1 w2 }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

